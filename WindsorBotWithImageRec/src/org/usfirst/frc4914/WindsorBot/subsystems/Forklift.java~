// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4914.WindsorBot.subsystems;

import org.usfirst.frc4914.WindsorBot.RobotMap;
import org.usfirst.frc4914.WindsorBot.commands.*;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.Subsystem;


public class Forklift extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController winchSlave = RobotMap.forkliftWinchSlave;
    private final CANTalon winchCAN = RobotMap.forkliftWinchCAN;
    private final CANTalon hookCAN = RobotMap.forkliftHookCAN;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /******* CONSTANTS *******/
    
    // forklift setpoints
    public static double forkliftMinSetpoint = 0;
    public static double forklift54Setpoint = 0;
    public static double forkliftMaxSetpoint = 0;
    // hook setpoints
    public static double hookMinSetpoint = 0;
    public static double hookMaxSetpoint = 0;
    // true when forklift operation restricted below 54 inches, otherwise false
    public boolean locked = true;

    /******* METHODS *******/
    
    public void initDefaultCommand() {
        setDefaultCommand(new OperateLift());
        
        // rearranges forklift constants if necessary
        if (forkliftMaxSetpoint < forkliftMinSetpoint) {
        	double temp = forkliftMaxSetpoint;
        	double diff = Math.abs(forkliftMaxSetpoint - forklift54Setpoint);
        	forkliftMaxSetpoint = forkliftMinSetpoint;
        	forkliftMinSetpoint = temp;
        	forklift54Setpoint = -diff;
        }
        // rearranges hook constants if necessary
        if (hookMaxSetpoint < hookMinSetpoint) {
        	double temp = hookMaxSetpoint;
        	hookMaxSetpoint = hookMinSetpoint;
        	hookMinSetpoint = temp;
        }
    }
    
    public double getFLiftQEValue() {
		return winchCAN.getEncPosition() / 10000.0;
	}

	public double getHookQEValue() {
		return hookCAN.getEncPosition() / 10000.0;
	}
	
	public void printEncoderValues() {
		System.out.println("Forklift QE Value: " + getFLiftQEValue());
		System.out.println("Hook QE Value: " + getHookQEValue());
	}
	
	public void resetFLiftQE() {
		winchCAN.setEncPosition(0);
	}
	
	public void resetHookQE() {
		hookCAN.setEncPosition(0);
	}
	
	public void resetAllQEs() {
		resetFLiftQE();
		resetHookQE();
	}
	
	public void setFLift(double outputValue) {
		winchCAN.set(-outputValue);
		winchSlave.set(-outputValue);
	}
	
	public void setHook(double outputValue) {
		hookCAN.set(outputValue);
	}
	
	public void setBrake(boolean brake) {
		winchCAN.enableBrakeMode(brake);
		hookCAN.enableBrakeMode(brake);
	}
	
	public void stop() {
		setFLift(0);
		setHook(0);
	}
}
