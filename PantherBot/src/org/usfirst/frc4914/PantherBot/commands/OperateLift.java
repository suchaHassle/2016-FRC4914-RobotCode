// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4914.PantherBot.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc4914.PantherBot.Robot;
import org.usfirst.frc4914.PantherBot.subsystems.Forklift;

/**
 *
 */
public class OperateLift extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public OperateLift() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.forklift);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	
    	// forklift operation
    	if ((-Robot.forklift.getFLiftQEValue() < Forklift.setpoint54 && 
	    		-Robot.forklift.getFLiftQEValue() > 0
	    		)|| (
	    		-Robot.forklift.getFLiftQEValue() <= 0 && 
	    		Robot.oi.getShooterJoystickLeft() > 0
	    		) || (
	    		-Robot.forklift.getFLiftQEValue() >= -Forklift.setpoint54 && 
				Robot.oi.getShooterJoystickLeft() < 0 &&
				Robot.forklift.locked
				) || (
				-Robot.forklift.getFLiftQEValue() >= 54 &&
				-Robot.forklift.getFLiftQEValue() < -Forklift.forkliftMax &&
				!Robot.forklift.locked
				) || (
				-Robot.forklift.getFLiftQEValue() >= -Forklift.forkliftMax &&
				Robot.oi.getShooterJoystickLeft() < 0)) {
    		Robot.forklift.setFLift(-Robot.oi.getShooterJoystickLeft());
    	}
    	
    	// hook operation
    	if ((-Robot.forklift.getHookQEValue() < -Forklift.setpointHookCeil && 
	    		-Robot.forklift.getHookQEValue() > 0
	    		) || (
	    		-Robot.forklift.getHookQEValue() <= 0 && 
	    		Robot.oi.getShooterJoystickRight() > 0
	    		) || (
	    		-Robot.forklift.getHookQEValue() >= -Forklift.setpointHookCeil && 
				Robot.oi.getShooterJoystickRight() < 0)) {	
        	Robot.forklift.setHook(Robot.oi.getShooterJoystickRight());
    	}
    	/*
    	Robot.forklift.setHook(Robot.oi.getShooterJoystickRight());
		Robot.forklift.setFLift(-Robot.oi.getShooterJoystickLeft());
		*/
    	
    	// QE Vals
    	System.out.println("Hook: " + Robot.forklift.getHookQEValue());
    	System.out.println("FLIFT: " + Robot.forklift.getFLiftQEValue());
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.forklift.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
