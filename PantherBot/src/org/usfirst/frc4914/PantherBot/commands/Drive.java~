// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4914.PantherBot.commands;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc4914.PantherBot.Robot;

/**
 *
 */
public class Drive extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public Drive() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	/*
    	 * robot drive type tests
    	 */
    	if (Robot.driveTrain.isInvertedDrive) {
    		if (Robot.driveTrain.isTankDrive) { invertedTankDrive(); }
    		else { invertedStraightDrive(); }
    	}
    	else {
    		if (Robot.driveTrain.isTankDrive) { normalTankDrive(); }
    		else { normalStraightDrive(); }
    	} // end of robot drive type tests
    	
    	/*
    	 * Shooter Intake
    	 */
    	if (Robot.oi.isDriverJoystickLeftTriggerPressed()) {
        	Robot.shooter.setIntakeSpeed(1);
    	}
    	else if (!Robot.oi.isDriverJoystickLeftTriggerPressed()) {
    		// new FIREIntakeSequence();
    		Robot.shooter.stopIntake();
    	}
    	
    	/*
    	 * Right trigger close shoot
    	 */
    	if (Robot.oi.isDriverJoystickRightTriggerPressed()) {
        	Robot.shooter.setFlySpeed(0.57, 0.95);
        	// 0.57 0.95
        	
        	/*
            Timer.delay(2);
            Robot.shooter.setIntakeSpeed(1);
            Timer.delay(0.5);
            Robot.shooter.stopIntake();
            Robot.shooter.stopFly();
            */
    	}
    	else {
    		Robot.shooter.stopFly();
    	}
    }
    

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.driveTrain.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
    
    // BEGIN CUSTOM COMMANDS
    
    public void normalTankDrive() {
    	Robot.driveTrain.setLeftVictor(Robot.oi.getDriverJoystickRight() * Robot.driveTrain.speedMultiplier);
		Robot.driveTrain.setRightVictor(Robot.oi.getDriverJoystickLeft() * Robot.driveTrain.speedMultiplier);
    } // end of method normalTankDrive()
    
    public void normalStraightDrive() {
    	Robot.driveTrain.driveStraight(Robot.oi.getDriverJoystickLeft() * Robot.driveTrain.speedMultiplier);
    } // end of method normalStraightDrive()
    
    public void invertedTankDrive() {
    	Robot.driveTrain.setLeftVictor(-Robot.oi.getDriverJoystickLeft() * Robot.driveTrain.speedMultiplier);
		Robot.driveTrain.setRightVictor(-Robot.oi.getDriverJoystickRight() * Robot.driveTrain.speedMultiplier);
    } // end of method invertedTankDrive()
    
    public void invertedStraightDrive() {
    	Robot.driveTrain.driveStraight(-Robot.oi.getDriverJoystickLeft() * Robot.driveTrain.speedMultiplier);
    } // end of method invertedStraightDrive()
    
    // END CUSTOM COMMANDS
}
