// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4914.PantherBot;

import org.usfirst.frc4914.PantherBot.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc4914.PantherBot.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton driverA;
    public JoystickButton driverB;
    public JoystickButton driverRightBumper;
    public JoystickButton driverLeftBumper;
    public Joystick driverJoystick;
    public JoystickButton shooterA;
    public JoystickButton shooterB;
    public JoystickButton shooterY;
    public JoystickButton shooterLeftBumper;
    public JoystickButton shooterRightBumper;
    public Joystick shooterJoystick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        shooterJoystick = new Joystick(2);
        
        shooterRightBumper = new JoystickButton(shooterJoystick, 6);
        shooterLeftBumper = new JoystickButton(shooterJoystick, 5);
        shooterLeftBumper.whileHeld(new FIREReverseIntake());
        shooterY = new JoystickButton(shooterJoystick, 4);
        shooterY.whenPressed(new FLIFTUnlock());
        shooterB = new JoystickButton(shooterJoystick, 2);
        shooterB.whenPressed(new FLIFTRaiseto54());
        shooterA = new JoystickButton(shooterJoystick, 1);
        shooterA.whenPressed(new FLIFTLowertoMin());
        driverJoystick = new Joystick(1);
        
        driverLeftBumper = new JoystickButton(driverJoystick, 5);
        driverLeftBumper.whileHeld(new FIREReverseIntake());
        driverRightBumper = new JoystickButton(driverJoystick, 6);
        driverB = new JoystickButton(driverJoystick, 2);
        driverB.whenPressed(new DriveInvert());
        driverA = new JoystickButton(driverJoystick, 1);
        driverA.whenPressed(new DriveToggle());


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("Operate Lift", new OperateLift());
        SmartDashboard.putData("Drive", new Drive());
        SmartDashboard.putData("Drive Invert", new DriveInvert());
        SmartDashboard.putData("Drive Toggle", new DriveToggle());
        SmartDashboard.putData("FIRE Intake Sequence", new FIREIntakeSequence());
        SmartDashboard.putData("FIRE Reverse Intake", new FIREReverseIntake());
        SmartDashboard.putData("FIRE Close Sequence", new FIRECloseSequence());
        SmartDashboard.putData("Emergency Stop", new EmergencyStop());
        SmartDashboard.putData("FLIFT Unlock", new FLIFTUnlock());
        SmartDashboard.putData("FLIFT Lower to Min", new FLIFTLowertoMin());
        SmartDashboard.putData("FLIFT Raise to 54", new FLIFTRaiseto54());
        SmartDashboard.putData("DEFENSE Portcullis", new DEFENSEPortcullis());
        SmartDashboard.putData("DEFENSE CDF", new DEFENSECDF());
        SmartDashboard.putData("DEFENSE Drawbridge", new DEFENSEDrawbridge());
        SmartDashboard.putData("DEFENSE Sally Port", new DEFENSESallyPort());
        SmartDashboard.putData("DEFENSE BD", new DEFENSEBD());
        SmartDashboard.putData("Reset All QEs", new ResetAllQEs());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriverJoystick() {
        return driverJoystick;
    }

    public Joystick getShooterJoystick() {
        return shooterJoystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    
    public double getDriverJoystickLeft() { return driverJoystick.getRawAxis(1); }
    public double getDriverJoystickRight() { return driverJoystick.getRawAxis(5); }
    public double getShooterJoystickLeft() { return shooterJoystick.getRawAxis(1); }
    public double getShooterJoystickRight() { return shooterJoystick.getRawAxis(5); }
    
    public int getDriverJoystickPOV() { return driverJoystick.getPOV(0); }
    public int getShooterJoystickPOV() { return driverJoystick.getPOV(0); }
    
    public boolean isDriverJoystickRightTriggerPressed() { return driverJoystick.getRawAxis(3) > 0.1; }
    public boolean isDriverJoystickLeftTriggerPressed() { return driverJoystick.getRawAxis(2) > 0.1; }
    public boolean isShooterJoystickRightTriggerPressed() { return shooterJoystick.getRawAxis(3) > 0.1; }
    public boolean isShooterJoystickLeftTriggerPressed() { return shooterJoystick.getRawAxis(2) > 0.1; }
}

